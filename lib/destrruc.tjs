var modef = require('./modef'),
    express = require('express');

var plur = modef.pluralize;

var opts = {
   pathPrefix: '',
   postResp:   'location',
   putResp:    'location',
   id:         function(id) { return { _id: id }; },
   render:     function(req, res, modelName, entity, next) { res.json(entity); },
   list:       function(req, res, modelName, entity, next) { res.json(entity); }
};


/********************************************************************
 * Crud Middleware
 */

function ensureArray(input) {
   if (input instanceof Array) {
      return input;
   } else {
      return [input];
   }
}
function idFunc(id) {
   return opts.id(id);
}
function entityId(entity) {
   return entity[opts.idField] ? entity[opts.idField] : entity._id;
}
function renderFunc(req, res, modelName, entity, next) {
   opts.render(req, res, modelName, entity, next);
}
function listFunc(req, res, modelName, entities, next) {
   opts.list(req, res, modelName, entities, next);
}
function fields(req) {
   var fields = req.query.fields;
   var filter = {};
   if (fields !== undefined) {
      if (fields instanceof Array) {
         for (n in fields) {
            var fieldz = fields[n].split(',');
            for (field in fieldz)
               filter[fieldz[field]] = true;
         }
      } else {
         fields = fields.split(',');
         for (field in fields)
            filter[fields[field]] = true;
      }
   }
   return filter;
}

function newEntity(req, res, next) {
   // console.log('new', req.modelName);
   req.entity = new req.model();
   req.entityNew = true;
   next();
}

function listModel(req, res, next) {
   var filter = fields(req);

   // console.log('list', req.model);
   var find = req.model.find({}, filter);

   find.run(function(err, entities) {
      //if (err) return;
      req.entities = entities;
      console.log('list', entities);
      next();
   });
}

function fetchEntity(req, res, next) {
   var filter = fields(req);

   // console.log('fetch', req.q);
   var find = req.model.findOne(req.q, filter);

   // populate connections
   var include = req.query.include;
   if (include) {
      include.split(',').forEach(function(inc) {
         // select fields
         var selects = inc.split('.');
         var fields = selects[1] ? selects[1].split('|') : [];
         find.populate(selects[0], fields);
      });
   }

   find.run(function(err, entity) {
      //if (err) return;
      req.entity = entity;
      console.log('fetch', entity);
      next();
   });
}

function removeEntity(req, res, next) {
   // console.log('remove', req.q);
   // TODO: disconnect from any other entities
   req.model.remove(req.q, function(err) {
      next();
   });
}

function andUpdate(req, res, next) {
   var connections = modef.connected(req.modelName);
   var updates = req.updates = req.body;
   var entity = req.entity;
   console.log('update', updates);

   for (field in updates) {
      // check connections for this field
      var connection = connections[field];
      if (connection) {
         if (!connection.many) {
            // TODO: disconnect if field already connected

            // add this entity to related entites
            var otherModel = modef[connection.to];
            var q = idFunc(updates[field]);
            var addToSet = { '$addToSet': { } }
            addToSet.$addToSet[plur(req.modelName)] = req.entity._id;
            // console.log(q);
            // console.log(addToSet);
            otherModel.update(q, addToSet).exec();

            // get other entity if idFunc did not set _id field
            if (!q._id) {
               var otherEntity;
               await {
                  otherModel.findOne(q, defer(err, otherEntity));
               }
               updates[field] = otherEntity._id;
            }
         } else {
            // add entity to list
            var model = modef[req.modelName];
            var q = { '_id': entity._id };
            var addToSet = { '$addToSet': {} };
            addToSet.$addToSet[plur(field)] = { '$each': [] };
            var ids = ensureArray(updates[field]);
            for (idi in ids)
               addToSet.$addToSet[plur(field)].$each.push(ids[idi]);
            console.log("", q, addToSet);
            model.update(q, addToSet).exec();
            continue;
         }
      }
      // set field
      entity[field] = updates[field];
   }
   next();
}

function andSave(req, res, next) {
   var entity = req.entity;
   console.log('save', entity);
   entity.save(function(err) {
      if (err) {
         next(new Error("Failed to save: " + err));
         return;
      }
      auditAction(req);
      next();
   });
}

function andHeaders(req, res, next) {
   var entity = req.entity;
   var id = entityId(entity);
   var location = opts['pathPrefix'] + '/' + req.modelName + '/' + id;
   res.header('ETag', JSON.stringify({ id:id, uri: location }));
   next();
}

function andRedirect(req, res) {
   var entity = req.entity;
   res.redirect(opts['pathPrefix'] + '/' + req.modelName + '/' + entityId(entity));
}

function and201(req, res) {
   var entity = req.entity;
   var location = opts['pathPrefix'] + '/' + req.modelName + '/' + entityId(entity);
   res.header('Location', location);
   res.send(location, 201);
}

function andRender(req, res, next) {
   renderFunc(req, res, req.modelName, req.entity, next);
}

function andList(req, res, next) {
   listFunc(req, res, req.modelName, req.entities, next);
}

function andOK(req, res) {
   res.send('removed ' + req.modelName + '(' + JSON.stringify(req.q) + ')');
}


// Create some useful hashes for option lookups
var reponseHandlers = {
   'location': and201,
   'render': andRender
}

/********************************************************************
 * Express extension
 */

express.HTTPServer.prototype.modef =
express.HTTPSServer.prototype.modef = function(o) {
   for (opt in o) opts[opt] = o[opt];

   this.param('model', function(req, res, next, model) {
      // console.log('model', model);
      req.model = modef[model];
      req.modelName = model;
      next();
   });

   this.param('id', function(req, res, next, id) {
      var q = req.q = idFunc(id);
      // console.log('id %s =>', id, q);
      next();
   });

   this.param('format', function(req, res, next, format) {
      var f = req.format = format;
      next();
   });

   // Get references to post and put response functions according to options
   var postResp = reponseHandlers[opts['postResp']];
   var putResp  = reponseHandlers[opts['putResp']];
   var pre = opts['pathPrefix'];

   this.get(pre + '/:model/:id.:format?', fetchEntity, andHeaders, andRender);
   this.get(pre + '/:model.:format?', listModel, andList);
   this.post(pre + '/:model', newEntity, andUpdate, andSave, andHeaders, postResp);
   this.put(pre + '/:model/:id.:format?', fetchEntity, andUpdate, andSave, andHeaders, putResp);
   this.delete(pre + '/:model/:id.:format?', removeEntity, andOK);
};


/********************************************************************
 * Auditing
 */

var auditors = [];
function audit(callback) {
   auditors.push({
      callback: callback
   });
}

function auditAction(req) {
   var modelName = modef.alias(req.modelName);
   var entity = req.entity;
   var action = req.entityNew ? 'new' : 'update';
   var fields = req.updates;
   setTimeout(function() {
      auditors.forEach(function(auditor) {
         auditor.callback(action, modelName, entity, fields);
      });
   }, 0);
}

// exports
module.exports.audit = audit;
